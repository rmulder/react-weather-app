{"version":3,"sources":["pages/Landing/styles.ts","components/Header/styles.ts","components/Header/index.tsx","components/Footer/styles.ts","components/Footer/index.tsx","components/Button/styles.ts","components/Button/index.tsx","components/Table/styles.ts","components/Table/index.tsx","components/Card/styles.ts","components/Card/index.tsx","components/SearchInput/styles.ts","components/SearchInput/index.tsx","components/Popup/styles.ts","utils/helpers.ts","components/Popup/index.tsx","components/List/styles.ts","components/List/index.tsx","api/weather/index.ts","pages/Landing/index.tsx","theme/globalStyles.ts","index.tsx","theme/defaultStyles.ts"],"names":["breakpoint1","breakpoint2","Container","styled","main","ButtonWrapper","div","TableWrapper","MainSectionWrapper","MapWrapper","FavoriteCityListWrapper","header","theme","colors","primary","Header","footer","secondary","year","Date","getFullYear","Footer","Wrapper","button","active","transitionTime","IconWrapper","Button","id","title","onClick","withIcon","backdropColor","section","TableHead","SpecialRow","selected","NoResults","SearchWrapper","ContentWrapper","Table","span","data","onCellClick","searchInputValue","onSearchInputChange","selectedValue","value","onChange","event","target","length","map","item","index","name","stateCode","subtitle","isoCode","Card","SearchInput","placeholder","WeatherWrapper","Overview","p","isObjectEmpty","object","Object","keys","convertUTCTimestamp","timestamp","toLocaleString","hour","minute","Popup","weather","buttonTitle","onButtonClick","sys","country","sunrise","sunset","description","charAt","toUpperCase","slice","src","icon","temp","feels_like","wind","speed","humidity","List","getWeatherByCoordinates","lat","lng","axios","get","then","catch","alert","mapContainerStyle","width","height","defaultCoordinates","latitude","longitude","Landing","useState","currentSection","setCurrentSection","primaryInputValue","setPrimaryInputValue","secondaryInputValue","setSecondaryInputValue","isChooseByCountrySection","selectedCountry","setSelectedCountry","selectedCity","setSelectedCity","setWeather","location","setLocation","JSON","parse","localStorage","getItem","favoriteCities","setFavoriteCities","handleDeviceGeolocation","navigator","geolocation","getCurrentPosition","position","a","coords","enableHighAccuracy","maximumAge","useEffect","countries","csc","getAllCountries","filter","toLowerCase","includes","cities","getCitiesOfCountry","city","getAllCities","handleOnCellClick","type","handleSectionClick","setToDefaultInputs","currentTarget","handleOnFavoriteCityPress","coordinates","setToDefaultObjects","centerForMap","zoomForMap","zoom","center","onCloseClick","favoriteCitiesCopy","findIndex","newCity","coord","lon","push","splice","sort","lhs","rhs","setItem","stringify","some","GlobalStyle","createGlobalStyle","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e110d68.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nconst breakpoint1 = '1026px';\r\nconst breakpoint2 = '761px';\r\n\r\nconst Container = styled.main`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  h4 {\r\n    color: black;\r\n    text-align: center;\r\n    margin: 0 5%;\r\n    font-weight: 400;\r\n  }\r\n`;\r\n\r\nconst ButtonWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 10px 0px;\r\n  button {\r\n    margin: 0.3rem;\r\n    height: 30px;\r\n  }\r\n`;\r\n\r\nconst TableWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  margin-left: 16px;\r\n  margin-right: 16px;\r\n  justify-content: space-between;\r\n  @media (max-width: ${breakpoint1}) {\r\n    flex-direction: row;\r\n    width: 70vw;\r\n    margin-bottom: 16px;\r\n  }\r\n  @media (max-width: ${breakpoint2}) {\r\n    flex-direction: column;\r\n    align-items: center;\r\n    section {\r\n      &:first-child {\r\n        margin-bottom: 16px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst MainSectionWrapper = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`;\r\n\r\nconst MapWrapper = styled.div`\r\n  margin-right: 16px;\r\n  @media (max-width: ${breakpoint1}) {\r\n    margin-right: 0;\r\n    margin-bottom: 16px;\r\n  }\r\n  @media (max-width: ${breakpoint2}) {\r\n    margin-top: 16px;\r\n  }\r\n`;\r\n\r\nconst FavoriteCityListWrapper = styled.div`\r\n  max-width: 70vw;\r\n  margin-bottom: 16px;\r\n  align-self: center;\r\n  min-width: 200px;\r\n`;\r\n\r\nexport {\r\n  Container,\r\n  ButtonWrapper,\r\n  TableWrapper,\r\n  MainSectionWrapper,\r\n  MapWrapper,\r\n  FavoriteCityListWrapper,\r\n};\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.header`\r\n  background-color: ${({ theme }) => theme.colors.primary};\r\n  padding: 12px;\r\n  text-align: center;\r\n  color: white;\r\n  h3 {\r\n    font-weight: 500;\r\n  }\r\n  p {\r\n    opacity: 0.3;\r\n  }\r\n`;\r\n\r\nexport { Container };\r\n","import * as S from './styles';\r\n\r\nconst Header: React.FC = () => {\r\n  return (\r\n    <S.Container>\r\n      <h3>Weather Application</h3>\r\n      <p>What's the weather like today?</p>\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.footer`\r\n  padding: 8px;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  color: white;\r\n  small {\r\n    display: flex;\r\n    justify-content: center;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport { Container };\r\n","import * as S from './styles';\r\n\r\nconst year = new Date().getFullYear();\r\n\r\nconst Footer: React.FC = () => {\r\n  return (\r\n    <S.Container>\r\n      <small>Copyright &copy; {year} Weather Application. All Rights Reserved</small>\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import styled from 'styled-components';\r\n\r\ninterface IWrapperStyled {\r\n  active?: boolean;\r\n}\r\n\r\nconst Wrapper = styled.button<IWrapperStyled>`\r\n  background-color: ${({ theme, active }) =>\r\n    !active ? theme.colors.primary : theme.colors.primary};\r\n  opacity: ${({ active }) => (active ? 1 : 0.6)};\r\n  padding: 8px 16px;\r\n  font-size: 13px;\r\n  line-height: 1;\r\n  color: white;\r\n  border: none;\r\n  cursor: ${({ active }) => (!active ? 'pointer' : 'auto')};\r\n  border-radius: 24px;\r\n  &:hover {\r\n    opacity: ${({ active }) => (!active ? '0.8' : null)};\r\n  }\r\n  transition: ${({ theme }) => theme.transitionTime};\r\n  pointer-events: ${({ active }) => (active ? 'none' : 'all')};\r\n`;\r\n\r\nconst IconWrapper = styled.button`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  padding: 5px;\r\n  font-size: 16px;\r\n  border: none;\r\n  cursor: pointer;\r\n  border-radius: 50%;\r\n  display: flex;\r\n  align-items: center;\r\n  &:hover {\r\n    opacity: 0.8;\r\n    background: ${({ theme }) => theme.colors.primary};\r\n  }\r\n  transition: ${({ theme }) => theme.transitionTime};\r\n`;\r\n\r\nexport { Wrapper, IconWrapper };\r\n","import * as S from './styles';\r\nimport { MouseEvent } from 'react';\r\n\r\ninterface IButtonProps {\r\n  title?: string;\r\n  active?: boolean;\r\n  onClick: (event: MouseEvent<HTMLButtonElement>) => void;\r\n  id?: string;\r\n  withIcon?: string;\r\n}\r\n\r\nconst Button: React.FC<IButtonProps> = ({ id, title, active, onClick, withIcon }) => {\r\n  return !withIcon ? (\r\n    <S.Wrapper active={active} onClick={onClick} id={id}>\r\n      {title}\r\n    </S.Wrapper>\r\n  ) : (\r\n    <S.IconWrapper onClick={onClick} id={id}>\r\n      {withIcon}\r\n    </S.IconWrapper>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import styled from 'styled-components';\r\n\r\ninterface ISpecialRowStyled {\r\n  selected: boolean;\r\n}\r\n\r\nconst backdropColor = '#e2e8f0';\r\n\r\nconst Container = styled.section`\r\n  width: 260px;\r\n  border: 1px ${backdropColor} solid;\r\n  color: black;\r\n  max-height: 273px;\r\n`;\r\n\r\nconst TableHead = styled.div`\r\n  padding: 12px;\r\n  text-align: center;\r\n  border-bottom: 1px solid ${backdropColor};\r\n  background-color: #f7f7f7;\r\n  h4 {\r\n    text-overflow: ellipsis;\r\n    overflow: hidden;\r\n    white-space: nowrap;\r\n  }\r\n`;\r\n\r\nconst SpecialRow = styled.div<ISpecialRowStyled>`\r\n  padding: 8px;\r\n  justify-content: left;\r\n  pointer-events: ${({ selected }) => (selected ? 'none' : 'all')};\r\n  display: flex;\r\n  transition: ${({ theme }) => theme.transitionTime};\r\n  background-color: ${({ theme, selected }) => (selected ? theme.colors.primary : null)};\r\n  border-top: 1px solid ${backdropColor};\r\n  &:hover {\r\n    background-color: ${({ selected }) => (!selected ? '#f7f7f7' : null)};\r\n    cursor: ${({ selected }) => (!selected ? 'pointer' : 'auto')};\r\n  }\r\n  &:first-child {\r\n    border: none;\r\n  }\r\n`;\r\n\r\nconst NoResults = styled.div`\r\n  padding: 8px;\r\n  span {\r\n    opacity: 0.6;\r\n  }\r\n`;\r\n\r\nconst SearchWrapper = styled.div`\r\n  padding: 8px;\r\n  border-bottom: 1px solid ${backdropColor};\r\n`;\r\n\r\nconst ContentWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 164px;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n`;\r\n\r\nconst AutocompleteWrapper = styled.div`\r\n  padding: 8px;\r\n  display: flex;\r\n  justify-content: center;\r\n  input {\r\n    padding: 8px;\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nconst Loading = styled.span`\r\n  display: flex;\r\n  border-top: 1px solid ${backdropColor};\r\n  padding: 8px;\r\n`;\r\n\r\nexport {\r\n  Container,\r\n  NoResults,\r\n  SpecialRow,\r\n  TableHead,\r\n  SearchWrapper,\r\n  ContentWrapper,\r\n  AutocompleteWrapper,\r\n  Loading,\r\n};\r\n","import * as S from './styles';\r\nimport { Card, SearchInput } from '../';\r\nimport { Fragment } from 'react';\r\n\r\ninterface ITableProps {\r\n  data: any[];\r\n  title: string;\r\n  onCellClick: (value: any) => void;\r\n  searchInputValue: string;\r\n  onSearchInputChange: (value: string) => void;\r\n  selectedValue?: any;\r\n}\r\n\r\nconst Table: React.FC<ITableProps> = ({\r\n  data,\r\n  title,\r\n  onCellClick,\r\n  searchInputValue,\r\n  onSearchInputChange,\r\n  selectedValue,\r\n}) => {\r\n  return (\r\n    <S.Container>\r\n      <S.TableHead>\r\n        <h4>{title}</h4>\r\n      </S.TableHead>\r\n      <Fragment>\r\n        <S.SearchWrapper>\r\n          <SearchInput\r\n            value={searchInputValue}\r\n            onChange={(event) => onSearchInputChange(event.target.value)}\r\n          />\r\n        </S.SearchWrapper>\r\n        <S.ContentWrapper>\r\n          {data.length <= 250 && data.length !== 0 ? (\r\n            data.map((item, index) => (\r\n              <S.SpecialRow\r\n                key={index}\r\n                selected={\r\n                  item.name === selectedValue?.name && item.stateCode === selectedValue?.stateCode\r\n                }\r\n                onClick={() => onCellClick(item)}\r\n              >\r\n                <Card title={item.name} subtitle={item.isoCode} />\r\n              </S.SpecialRow>\r\n            ))\r\n          ) : (\r\n            <S.NoResults>\r\n              <span>\r\n                {data.length > 250\r\n                  ? `Too much results. Please narrow your search.`\r\n                  : 'No results found...'}\r\n              </span>\r\n            </S.NoResults>\r\n          )}\r\n        </S.ContentWrapper>\r\n      </Fragment>\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n\r\n{\r\n  /* <div>\r\n        {!withGoogleAutoComplete ? (\r\n          <Fragment>\r\n            <S.SearchWrapper>\r\n              <SearchInput\r\n                value={searchInputValue}\r\n                onChange={(event) => onSearchInputChange(event.target.value)}\r\n              />\r\n            </S.SearchWrapper>\r\n            <S.ContentWrapper>\r\n              {data.length <= 250 && data.length !== 0 ? (\r\n                data?.map((item) => {\r\n                  return (\r\n                    <S.SpecialRow\r\n                      key={item.isoCode}\r\n                      selected={item.name === selectedValue?.name}\r\n                      onClick={() => onCellClick(item)}\r\n                    >\r\n                      <Card title={item.name} subtitle={item.isoCode} />\r\n                    </S.SpecialRow>\r\n                  );\r\n                })\r\n              ) : (\r\n                <S.NoResults>\r\n                  <span>\r\n                    {data.length > 250\r\n                      ? `Too many cities. Please narrow your search.`\r\n                      : 'No results found...'}\r\n                  </span>\r\n                </S.NoResults>\r\n              )}\r\n            </S.ContentWrapper>\r\n          </Fragment>\r\n        ) : (\r\n          <PlacesAutocomplete\r\n            value={searchInputValue}\r\n            onChange={onSearchInputChange}\r\n            searchOptions={{ types: ['(cities)'] }}\r\n          >\r\n            {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => {\r\n              // The onKeyDown property had to be removed from the getInputProps due to conflict with the input tag and TS not excepting the prop.\r\n              // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n              const { onKeyDown, ...inputProps } = getInputProps({\r\n                placeholder: 'Search Cities...',\r\n              });\r\n\r\n              return (\r\n                <Fragment>\r\n                  <S.AutocompleteWrapper>\r\n                    <input {...inputProps}></input>\r\n                  </S.AutocompleteWrapper>\r\n                  {loading && <S.Loading>Loading...</S.Loading>}\r\n                  {suggestions.map((suggestion) => {\r\n                    return (\r\n                      <S.SpecialRow\r\n                        {...(getSuggestionItemProps(suggestion), { key: suggestion.placeId })}\r\n                        selected={suggestion.placeId === selectedValue?.place_id}\r\n                        onClick={async () => {\r\n                          onCellClick(await geocodeByPlaceId(suggestion.placeId));\r\n                        }}\r\n                      >\r\n                        <Card title={suggestion.description} />\r\n                      </S.SpecialRow>\r\n                    );\r\n                  })}\r\n                </Fragment>\r\n              );\r\n            }}\r\n          </PlacesAutocomplete>\r\n        )}\r\n      </div> */\r\n}\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  width: 100%;\r\n  div {\r\n    span {\r\n      margin-right: 5px;\r\n      &:not(:first-child) {\r\n        background-color: #e0e0e0;\r\n        border-radius: 25px;\r\n        padding: 0 12px;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Container };\r\n","import * as S from './styles';\r\n\r\ninterface ICardProps {\r\n  title: string;\r\n  subtitle?: string;\r\n}\r\n\r\nconst Card: React.FC<ICardProps> = ({ title, subtitle }) => {\r\n  return (\r\n    <S.Container>\r\n      <div>\r\n        <span>{title}</span>\r\n        {subtitle && <span>{subtitle}</span>}\r\n      </div>\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  input {\r\n    padding: 8px;\r\n    width: 90%;\r\n  }\r\n`;\r\n\r\nexport { Container };\r\n","import * as S from './styles';\r\nimport { ChangeEvent } from 'react';\r\n\r\ninterface ISearchInputProps {\r\n  value: string;\r\n  onChange: (event: ChangeEvent<HTMLInputElement>) => void;\r\n}\r\n\r\nconst SearchInput: React.FC<ISearchInputProps> = ({ value, onChange }) => {\r\n  return (\r\n    <S.Container>\r\n      <input placeholder=\"Search...\" value={value} onChange={onChange}></input>\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default SearchInput;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  color: black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  h3 {\r\n    margin: 5px 0;\r\n    color: #d14d4d;\r\n    font-weight: 500;\r\n  }\r\n  span {\r\n    color: grey;\r\n  }\r\n  button {\r\n    margin-top: 5px;\r\n  }\r\n`;\r\n\r\nconst WeatherWrapper = styled.div`\r\n  margin-top: 5px;\r\n  p {\r\n    margin-top: 5px;\r\n    margin-bottom: 5px;\r\n  }\r\n`;\r\n\r\nconst Overview = styled.p`\r\n  display: flex;\r\n  align-items: center;\r\n  img {\r\n    height: 25px;\r\n  }\r\n`;\r\n\r\nexport { Container, WeatherWrapper, Overview };\r\n","export const isObjectEmpty = (object: any): boolean => {\r\n  return Object.keys(object).length === 0;\r\n};\r\n\r\nexport const convertUTCTimestamp = (timestamp: number) => {\r\n  return new Date(timestamp * 1000).toLocaleString('en-GB', {\r\n    hour: 'numeric',\r\n    minute: 'numeric',\r\n  });\r\n};\r\n","import * as S from './styles';\r\nimport { WeatherType } from '../../types';\r\nimport { convertUTCTimestamp } from '../../utils/helpers';\r\nimport Button from '../Button';\r\n\r\ninterface IPopupProps {\r\n  weather: WeatherType;\r\n  onButtonClick: (value: any) => void;\r\n  buttonTitle: string;\r\n}\r\n\r\nconst Popup: React.FC<IPopupProps> = ({ weather, buttonTitle, onButtonClick }) => {\r\n  return (\r\n    <S.Container>\r\n      <h3>{`📍 ${weather.name}, ${weather.sys.country}`}</h3>\r\n      <S.WeatherWrapper>\r\n        <span>Current weather:</span>\r\n        <p>{`☀️ ${convertUTCTimestamp(weather.sys.sunrise)} - 🌑 ${convertUTCTimestamp(\r\n          weather.sys.sunset\r\n        )}`}</p>\r\n        <S.Overview>\r\n          {weather.weather[0].description.charAt(0).toUpperCase() +\r\n            weather.weather[0].description.slice(1)}\r\n          <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\r\n        </S.Overview>\r\n        <p>{`Temperature: ${weather.main.temp} °C, feels like: ${weather.main.feels_like} °C`}</p>\r\n        <p>{`Wind speed: ${weather.wind.speed} 💨`}</p>\r\n        <p>{`Humidity: ${weather.main.humidity} 💧`}</p>\r\n      </S.WeatherWrapper>\r\n      <Button title={buttonTitle} onClick={onButtonClick} />\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default Popup;\r\n","import styled from 'styled-components';\r\n\r\nconst Container = styled.div`\r\n  color: black;\r\n  display: flex;\r\n  overflow-x: scroll;\r\n  overflow-y: hidden;\r\n  border: 1px solid #e2e8f0;\r\n  div {\r\n    padding: 8px 16px;\r\n    margin: 5px;\r\n    border-radius: 26px;\r\n    background-color: #f7f7f7;\r\n    &:hover {\r\n      background-color: ${({ theme }) => theme.colors.primary};\r\n      cursor: pointer;\r\n    }\r\n    span {\r\n      font-size: 14px;\r\n      text-overflow: ellipsis;\r\n      overflow: hidden;\r\n      white-space: nowrap;\r\n    }\r\n  }\r\n`;\r\n\r\nexport { Container };\r\n","import * as S from './styles';\r\n\r\ninterface IListProps {\r\n  data: any[];\r\n  onCellClick: (value: any) => void;\r\n}\r\n\r\nconst List: React.FC<IListProps> = ({ data, onCellClick }) => {\r\n  return (\r\n    <S.Container>\r\n      {data.map((item, index) => {\r\n        return (\r\n          <div key={index} onClick={() => onCellClick(item)}>\r\n            <span>{item.name}</span>\r\n          </div>\r\n        );\r\n      })}\r\n    </S.Container>\r\n  );\r\n};\r\n\r\nexport default List;\r\n","import axios from 'axios';\r\n\r\nconst WEATHER_API_KEY = '8fd7d294b0ff55fc0754e9b221f3a560';\r\nconst HTTP_BASE = 'https://api.openweathermap.org/data/2.5/weather?units=metric&';\r\n\r\nexport const getWeatherByCoordinates = (lat: number, lng: number) => {\r\n  return axios\r\n    .get(`${HTTP_BASE}lat=${lat}&lon=${lng}&appid=${WEATHER_API_KEY}`)\r\n    .then(({ data }) => data)\r\n    .catch(() => {\r\n      alert('Something went wrong with the weather.');\r\n    });\r\n};\r\n","import { Fragment, useState, MouseEvent, useEffect } from 'react';\r\nimport * as S from './styles';\r\nimport { Header, Footer, Button, Table, Popup, List } from '../../components';\r\nimport csc from 'country-state-city';\r\nimport { CountryType, CityType, WeatherType } from '../../types';\r\nimport { isObjectEmpty } from '../../utils/helpers';\r\nimport { GoogleMap, InfoWindow, Marker } from '@react-google-maps/api';\r\nimport { getWeatherByCoordinates } from '../../api/weather';\r\n\r\nconst mapContainerStyle = {\r\n  width: '70vw',\r\n  height: '562px',\r\n};\r\n\r\n// Default Kaunas City coordinates\r\nconst defaultCoordinates = {\r\n  latitude: 54.8985,\r\n  longitude: 23.9036,\r\n};\r\n\r\nconst Landing: React.FC = () => {\r\n  const [currentSection, setCurrentSection] = useState<number>(0);\r\n\r\n  const [primaryInputValue, setPrimaryInputValue] = useState<string>('');\r\n  const [secondaryInputValue, setSecondaryInputValue] = useState<string>('');\r\n\r\n  const isChooseByCountrySection = currentSection === 0;\r\n\r\n  const [selectedCountry, setSelectedCountry] = useState<CountryType>({} as CountryType);\r\n  const [selectedCity, setSelectedCity] = useState<CityType>({} as CityType);\r\n\r\n  const [weather, setWeather] = useState<WeatherType>({} as WeatherType);\r\n\r\n  const [location, setLocation] = useState<{ latitude: number; longitude: number }>(\r\n    defaultCoordinates\r\n  );\r\n\r\n  const [favoriteCities, setFavoriteCities] = useState<any[]>(\r\n    JSON.parse(localStorage.getItem('fav-cities') || '[]')\r\n  );\r\n\r\n  const handleDeviceGeolocation = () => {\r\n    navigator.geolocation.getCurrentPosition(\r\n      async (position) => {\r\n        setLocation({\r\n          latitude: position.coords.latitude,\r\n          longitude: position.coords.longitude,\r\n        });\r\n        setWeather(\r\n          await getWeatherByCoordinates(position.coords.latitude, position.coords.longitude)\r\n        );\r\n      },\r\n      () => alert('Geolocation is not supported by this browser.'),\r\n      { enableHighAccuracy: true, maximumAge: 1000 }\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (location === defaultCoordinates) handleDeviceGeolocation();\r\n  }, []);\r\n\r\n  const countries = isChooseByCountrySection\r\n    ? csc.getAllCountries().filter((country) => {\r\n        return country.name.toLowerCase().includes(primaryInputValue.toLowerCase());\r\n      })\r\n    : [];\r\n\r\n  const cities =\r\n    isChooseByCountrySection && selectedCountry?.name\r\n      ? csc.getCitiesOfCountry(selectedCountry.isoCode).filter((city) => {\r\n          return city.name.toLowerCase().includes(secondaryInputValue.toLowerCase());\r\n        })\r\n      : !isChooseByCountrySection\r\n      ? csc.getAllCities().filter((city) => {\r\n          return city.name.toLowerCase().includes(primaryInputValue.toLowerCase());\r\n        })\r\n      : [];\r\n\r\n  const handleOnCellClick = async (value: any, type: string) => {\r\n    if (type === 'country') {\r\n      setWeather({} as WeatherType);\r\n      setSelectedCountry(value);\r\n      setPrimaryInputValue(value.name);\r\n      // This exception handles the problem when a country doesn't have cities that have > 1000 population.\r\n      if (csc.getCitiesOfCountry(value.isoCode).length === 0) {\r\n        setWeather(await getWeatherByCoordinates(value.latitude, value.longitude));\r\n        setSelectedCity(value);\r\n      }\r\n    } else if (!isChooseByCountrySection) {\r\n      setWeather(await getWeatherByCoordinates(value.latitude, value.longitude));\r\n      setSelectedCity(value);\r\n      setPrimaryInputValue(value.name);\r\n    } else {\r\n      setWeather(await getWeatherByCoordinates(value.latitude, value.longitude));\r\n      setSelectedCity(value);\r\n      setSecondaryInputValue(value.name);\r\n    }\r\n  };\r\n\r\n  const handleSectionClick = async (event: MouseEvent<HTMLButtonElement>) => {\r\n    setToDefaultInputs();\r\n    setCurrentSection(+event.currentTarget.id);\r\n  };\r\n\r\n  const handleOnGeolocationClick = () => {\r\n    setToDefaultObjects();\r\n    setToDefaultInputs();\r\n    handleDeviceGeolocation();\r\n  };\r\n\r\n  const handleAddRemoveCityFromFavorites = () => {\r\n    const favoriteCitiesCopy = [...favoriteCities];\r\n\r\n    const index = favoriteCitiesCopy.findIndex((city: any) => {\r\n      return city.name === weather.name;\r\n    });\r\n\r\n    if (index < 0) {\r\n      const newCity = {\r\n        name: weather.name,\r\n        coordinates: { latitude: weather.coord.lat, longitude: weather.coord.lon },\r\n      };\r\n      favoriteCitiesCopy.push(newCity);\r\n    } else favoriteCitiesCopy.splice(index, 1);\r\n    favoriteCitiesCopy.sort((lhs, rhs) => (lhs.name > rhs.name ? 1 : rhs.name > lhs.name ? -1 : 0));\r\n    setFavoriteCities(favoriteCitiesCopy);\r\n    localStorage.setItem('fav-cities', JSON.stringify(favoriteCitiesCopy));\r\n  };\r\n\r\n  // For checking if a city is already added as a favorite in the cache.\r\n  const cityExistsInStorage = () => {\r\n    return !!favoriteCities.some((city) => {\r\n      return weather.name === city.name;\r\n    });\r\n  };\r\n\r\n  const handleOnFavoriteCityPress = async (value: any) => {\r\n    const {\r\n      coordinates: { latitude, longitude },\r\n    } = value;\r\n    setToDefaultObjects();\r\n    setToDefaultInputs();\r\n    setWeather(await getWeatherByCoordinates(latitude, longitude));\r\n    setLocation({\r\n      latitude,\r\n      longitude,\r\n    });\r\n  };\r\n\r\n  // Variable that handles the position of the Google Map, so that the country/city is always in the center.\r\n  const centerForMap =\r\n    isObjectEmpty(selectedCountry) && isObjectEmpty(selectedCity)\r\n      ? { lat: location.latitude, lng: location.longitude }\r\n      : !isObjectEmpty(selectedCountry) && isObjectEmpty(selectedCity)\r\n      ? { lat: +selectedCountry.latitude, lng: +selectedCountry.longitude }\r\n      : !isObjectEmpty(selectedCountry) && !isObjectEmpty(selectedCity)\r\n      ? { lat: +selectedCity.latitude, lng: +selectedCity.longitude }\r\n      : isObjectEmpty(selectedCountry) && !isObjectEmpty(selectedCity)\r\n      ? { lat: +selectedCity.latitude, lng: +selectedCity.longitude }\r\n      : { lat: defaultCoordinates.latitude, lng: defaultCoordinates.longitude };\r\n\r\n  const zoomForMap =\r\n    isObjectEmpty(selectedCountry) && isObjectEmpty(selectedCity)\r\n      ? 16\r\n      : !isObjectEmpty(selectedCountry) && isObjectEmpty(selectedCity)\r\n      ? 8\r\n      : 16;\r\n\r\n  // Methods for basic utility\r\n  const setToDefaultInputs = () => {\r\n    setPrimaryInputValue('');\r\n    setSecondaryInputValue('');\r\n  };\r\n\r\n  const setToDefaultObjects = () => {\r\n    setSelectedCity({} as CityType);\r\n    setSelectedCountry({} as CountryType);\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <Header />\r\n      <S.Container>\r\n        <S.ButtonWrapper>\r\n          <Button\r\n            id=\"0\"\r\n            title=\"Choose by country\"\r\n            active={isChooseByCountrySection}\r\n            onClick={handleSectionClick}\r\n          />\r\n          <Button onClick={handleOnGeolocationClick} withIcon=\"🧭\" />\r\n          <Button\r\n            id=\"1\"\r\n            title=\"Search by city\"\r\n            active={!isChooseByCountrySection}\r\n            onClick={handleSectionClick}\r\n          />\r\n        </S.ButtonWrapper>\r\n        {favoriteCities.length > 0 && (\r\n          <S.FavoriteCityListWrapper>\r\n            <h4>Your favorite cities:</h4>\r\n            <List data={favoriteCities} onCellClick={handleOnFavoriteCityPress} />\r\n          </S.FavoriteCityListWrapper>\r\n        )}\r\n        <S.MainSectionWrapper>\r\n          <S.TableWrapper>\r\n            <Table\r\n              data={isChooseByCountrySection ? countries : cities}\r\n              title={isChooseByCountrySection ? 'Countries' : 'Cities'}\r\n              onCellClick={(value) => {\r\n                handleOnCellClick(value, isChooseByCountrySection ? 'country' : 'city');\r\n              }}\r\n              searchInputValue={primaryInputValue}\r\n              onSearchInputChange={(value: string) => {\r\n                if (secondaryInputValue !== '') setSecondaryInputValue('');\r\n                setPrimaryInputValue(value);\r\n              }}\r\n              selectedValue={isChooseByCountrySection ? selectedCountry : selectedCity}\r\n            />\r\n            {isChooseByCountrySection && !isObjectEmpty(selectedCountry) && (\r\n              <Table\r\n                data={cities}\r\n                title={`${selectedCountry?.name}'s cities`}\r\n                onCellClick={(value) => {\r\n                  handleOnCellClick(value, 'city');\r\n                }}\r\n                searchInputValue={secondaryInputValue}\r\n                onSearchInputChange={(value: string) => setSecondaryInputValue(value)}\r\n                selectedValue={selectedCity}\r\n              />\r\n            )}\r\n          </S.TableWrapper>\r\n          <S.MapWrapper>\r\n            <GoogleMap\r\n              mapContainerStyle={mapContainerStyle}\r\n              zoom={zoomForMap}\r\n              center={centerForMap}\r\n            >\r\n              <Marker\r\n                position={centerForMap}\r\n                onClick={async () => {\r\n                  setWeather(await getWeatherByCoordinates(centerForMap.lat, centerForMap.lng));\r\n                }}\r\n              />\r\n              {!isObjectEmpty(weather) && (\r\n                <Fragment>\r\n                  <InfoWindow\r\n                    position={centerForMap}\r\n                    onCloseClick={() => {\r\n                      setWeather({} as WeatherType);\r\n                    }}\r\n                  >\r\n                    <Popup\r\n                      weather={weather}\r\n                      onButtonClick={handleAddRemoveCityFromFavorites}\r\n                      buttonTitle={\r\n                        !cityExistsInStorage() ? 'Add to favorites' : 'Remove from favorites'\r\n                      }\r\n                    />\r\n                  </InfoWindow>\r\n                </Fragment>\r\n              )}\r\n            </GoogleMap>\r\n          </S.MapWrapper>\r\n        </S.MainSectionWrapper>\r\n      </S.Container>\r\n      <Footer />\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nexport default Landing;\r\n","import { createGlobalStyle } from 'styled-components';\r\n\r\nconst GlobalStyle = createGlobalStyle`\r\n    html {\r\n        font-family: \"Poppins\", sans-serif;\r\n    }\r\n    #root{\r\n        height:100vh;\r\n        display: flex;\r\n        flex-direction: column;\r\n        justify-content: space-between;\r\n    }\r\n    body{\r\n        color: black;\r\n    }\r\n    h3, p{\r\n        margin:0;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n        margin: 0;\r\n        padding: 0;\r\n    }\r\n    input, button{\r\n        font-family: \"Poppins\", sans-serif;\r\n    }\r\n`;\r\n\r\nexport default GlobalStyle;\r\n","import { render } from 'react-dom';\nimport { ThemeProvider } from 'styled-components';\nimport Landing from './pages/Landing';\nimport GlobalStyle from './theme/globalStyles';\nimport DefaultStyle from './theme/defaultStyles';\n\nrender(\n  <ThemeProvider theme={DefaultStyle}>\n    <GlobalStyle />\n    <Landing />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n","export default {\r\n  colors: {\r\n    primary: '#1C9CF6',\r\n    secondary: '#80caff',\r\n  },\r\n  transitionTime: '0.1s',\r\n};\r\n"],"sourceRoot":""}